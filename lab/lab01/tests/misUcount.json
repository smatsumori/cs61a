{"answerDict": {">>> True and 1 / 0 and False\nError\n>>> True or 1 / 0 or False\nTrue\n>>> True and 0\n0\n>>> False or 1\nLOCKED_ANSWER\n>>> 1 and 3 and 6 and 10 and 15\nLOCKED_ANSWER\n>>> 0 or False or 2 or 1 / 0\nLOCKED_ANSWER\n": ["['']", "['0']"], ">>> True and 13\n13\n>>> False or 0\n0\n>>> not 10\nLOCKED_ANSWER\n>>> not None\nLOCKED_ANSWER\n": ["['True']", "['10']"], ">>> def xk(c, d):\n...     if c == 4:\n...         return 6\n...     elif d >= 4:\n...         return 6 + 7 + c\n...     else:\n...         return 25\n>>> xk(10, 10)\n23\n>>> xk(10, 6)\nLOCKED_ANSWER\n>>> xk(4, 6)\nLOCKED_ANSWER\n>>> xk(0, 0)\nLOCKED_ANSWER\n": ["['19']", "['25']", "['Nothig']", "['Nothing']"], ">>> True and 13\nLOCKED_ANSWER\n>>> False or 0\nLOCKED_ANSWER\n>>> not 10\nLOCKED_ANSWER\n>>> not None\nLOCKED_ANSWER\n": ["['True']"], ">>> def how_big(x):\n...     if x > 10:\n...         print('huge')\n...     elif x > 5:\n...         return 'big'\n...     elif x > 0:\n...         print('small')\n...     else:\n...         print(\"nothin'\")\n>>> how_big(7)\nLOCKED_ANSWER\n>>> how_big(12)\nLOCKED_ANSWER\n>>> how_big(1)\nLOCKED_ANSWER\n>>> how_big(-1)\nLOCKED_ANSWER\n": ["['Nothing']", "['big']", "['None']", "['']", "[\"'big\"]"], ">>> def so_big(x):\n...     if x > 10:\n...         print('huge')\n...     if x > 5:\n...         return 'big'\n...     if x > 0:\n...         print('small')\n...     print(\"nothin'\")\n>>> so_big(7)\n'big'\n>>> so_big(12)\nLOCKED_ANSWER\nLOCKED_ANSWER\n>>> so_big(1)\nLOCKED_ANSWER\nLOCKED_ANSWER\n": ["[\"'huge'\"]"], ">>> def how_big(x):\n...     if x > 10:\n...         print('huge')\n...     elif x > 5:\n...         return 'big'\n...     elif x > 0:\n...         print('small')\n...     else:\n...         print(\"nothin'\")\n>>> how_big(7)\n'big'\n>>> how_big(12)\nhuge\n>>> how_big(1)\nsmall\n>>> how_big(-1)\nLOCKED_ANSWER\n": ["['nothin']"], ">>> def xk(c, d):\n...     if c == 4:\n...         return 6\n...     elif d >= 4:\n...         return 6 + 7 + c\n...     else:\n...         return 25\n>>> xk(10, 10)\nLOCKED_ANSWER\n>>> xk(10, 6)\nLOCKED_ANSWER\n>>> xk(4, 6)\nLOCKED_ANSWER\n>>> xk(0, 0)\nLOCKED_ANSWER\n": ["['26']"], ">>> x = [1, 3, [5, 7], 9]\nx[2][1]\n>>> x = [[7]]\nx[0][0]\n>>> x = [1, [2, [3, [4, [5, [6, [7]]]]]]]\nLOCKED_ANSWER\n": ["['x[1][1][1][1][1][1]']", "['x[1][1][1][1][1][1][1]']", "['x[1][1][1][1][1]']"], ">>> def go(n):\n...     if n % 2 != 0:\n...         print(n / 2)\n...         return\n...     while n > 0:\n...         print(n)\n...         n = n // 2\n>>> go(4)\nLOCKED_ANSWER\nLOCKED_ANSWER\nLOCKED_ANSWER\n>>> go(5)\nLOCKED_ANSWER\n": ["['4', '2', '0']", "['4', '2', '']", "['4', '2', 'None']", "['']"], ">>> x = [1, 3, [5, 7], 9]\nLOCKED_ANSWER\n>>> x = [[7]]\nLOCKED_ANSWER\n>>> x = [1, [2, [3, [4, [5, [6, [7]]]]]]]\nLOCKED_ANSWER\n": ["['x[2[1]]']"], ">>> True and 13\n13\n>>> False or 0\nLOCKED_ANSWER\n>>> not 10\nLOCKED_ANSWER\n>>> not None\nLOCKED_ANSWER\n": ["['False']"], ">>> True and 1 / 0 and False\nLOCKED_ANSWER\n>>> True or 1 / 0 or False\nLOCKED_ANSWER\n>>> True and 0\nLOCKED_ANSWER\n>>> False or 1\nLOCKED_ANSWER\n>>> 1 and 3 and 6 and 10 and 15\nLOCKED_ANSWER\n>>> 0 or False or 2 or 1 / 0\nLOCKED_ANSWER\n": ["['True']", "['1 / 0']"], ">>> True and 1 / 0 and False\nError\n>>> True or 1 / 0 or False\nTrue\n>>> True and 0\nLOCKED_ANSWER\n>>> False or 1\nLOCKED_ANSWER\n>>> 1 and 3 and 6 and 10 and 15\nLOCKED_ANSWER\n>>> 0 or False or 2 or 1 / 0\nLOCKED_ANSWER\n": ["['False']"], ">>> 0 or True\nTrue\n>>> not '' or not 0 and False\nTrue\n>>> 13 and False\nLOCKED_ANSWER\n": ["['13']"], ">>> def so_big(x):\n...     if x > 10:\n...         print('huge')\n...     if x > 5:\n...         return 'big'\n...     if x > 0:\n...         print('small')\n...     print(\"nothin'\")\n>>> so_big(7)\n'big'\n>>> so_big(12)\nhuge\n'big'\n>>> so_big(1)\nLOCKED_ANSWER\nLOCKED_ANSWER\n": ["['huge']"]}, "countData": {"lstindxusenestbrackets": 1, "swapandor": 4, "sloppyarith-sloppy": 1, "strdsntneedquotes-stringsyntax": 1, "notdoesnothing-not": 1, "zerodivdsnterr-zerodiverror": 1, "nonzeroisfalsey-booleanfalseyvalues": 2, "boolexprrtnbool-and": 3, "swapandor-or": 4, "swapandor-shortcircuit": 4, "nfloordivnisweird": 1, "sloppyifcondition": 2, "andshrtcirtruthy-and": 2, "orshrtcirfalsey-shortcircuit": 1, "strdsntneedquotes": 1, "sloppyvareval": 1, "zerodivdsnterr": 1, "andshrtcirtruthy": 2, "orshrtcirfalsey-or": 1, "correct": 1, "prntstrwithquotes-printstring": 1, "prntstrwithquotes": 1, "sloppyifcondition-sloppy": 2, "nonzeroisfalsey": 2, "noevalexpr": 1, "boolexprrtnbool": 3, "boolexprrtnbool-or": 3, "nfloordivnisweird-divisiontype": 1, "swapandor-and": 4, "notdoesnothing": 1, "sloppyarith": 1, "noevalexpr-evalexpr": 1, "lstindxusenestbrackets-listindexing": 1, "sloppyvareval-sloppy": 1, "andshrtcirtruthy-shortcircuit": 2, "orshrtcirfalsey": 1}}