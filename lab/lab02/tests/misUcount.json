{"answerDict": {">>> t = lambda f: lambda x: f(f(f(x)))\n>>> s = lambda x: x + 1\n>>> t(s)(0)\n3\n>>> bar = lambda y: lambda x: pow(x, y)\n>>> bar()(15)\nError\n>>> foo = lambda: 32\n>>> foobar = lambda x, y: x // y\n>>> a = lambda x: foobar(foo(), bar(4)(x))\n>>> a(2)\n2\n>>> b = lambda x, y: print('summer')\nLOCKED_ANSWER\n>>> c = b(4, 'dog')\nLOCKED_ANSWER\n>>> print(c)\nLOCKED_ANSWER\n": ["['']", "['summser']", "['summer']"], ">>> lambda x: x\nFunction\n>>> a = lambda x: x\n>>> a(5)\n5\n>>> b = lambda: 3\n>>> b()\n3\n>>> c = lambda x: lambda: print('123')\n>>> c(88)\nLOCKED_ANSWER\n>>> c(88)()\nLOCKED_ANSWER\n>>> d = lambda f: f(4)\n>>> def square(x):\n...     return x * x\n>>> d(square)\nLOCKED_ANSWER\n": ["['123']", "[\"'123'\"]", "['Error']"], ">>> def even(f):\n...     def odd(x):\n...         if x < 0:\n...             return f(-x)\n...         return f(x)\n...     return odd\n>>> stevphen = lambda x: x\n>>> stewart = even(stevphen)\n>>> stewart\nFunction\n>>> stewart(61)\nLOCKED_ANSWER\n>>> stewart(-4)\nLOCKED_ANSWER\n": ["['Error']", "['-61']"], ">>> lambda x: x\nLOCKED_ANSWER\n>>> a = lambda x: x\n>>> a(5)\nLOCKED_ANSWER\n>>> b = lambda: 3\n>>> b()\nLOCKED_ANSWER\n>>> c = lambda x: lambda: print('123')\n>>> c(88)\nLOCKED_ANSWER\n>>> c(88)()\nLOCKED_ANSWER\n>>> d = lambda f: f(4)\n>>> def square(x):\n...     return x * x\n>>> d(square)\nLOCKED_ANSWER\n": ["['x']", "['None']", "['Nothing']", "['']", "['lambda x:x']", "['False']", "['True']", "['function']", "['<function <lambda> at ...>']", "['quit']", "['<function __main__.<lambda>>']", "['lambda']", "['python3 ok -q hof -u']"], ">>> def first(x):\n...     x += 8\n...     def second(y):\n...         print('second')\n...         return x + y\n...     print('first')\n...     return second\n>>> f = first(15)\nfirst\n>>> f\nLOCKED_ANSWER\n>>> f(16)\nLOCKED_ANSWER\nLOCKED_ANSWER\n": ["['second']", "['<function second>']", "['<function ...>']", "['<function __main__.second>']", "['quit(']"], ">>> def first(x):\n...     x += 8\n...     def second(y):\n...         print('second')\n...         return x + y\n...     print('first')\n...     return second\n>>> f = first(15)\nfirst\n>>> f\nFunction\n>>> f(16)\nLOCKED_ANSWER\nLOCKED_ANSWER\n": ["['39']"], ">>> t = lambda f: lambda x: f(f(f(x)))\n>>> s = lambda x: x + 1\n>>> t(s)(0)\n3\n>>> bar = lambda y: lambda x: pow(x, y)\n>>> bar()(15)\nError\n>>> foo = lambda: 32\n>>> foobar = lambda x, y: x // y\n>>> a = lambda x: foobar(foo(), bar(4)(x))\n>>> a(2)\n2\n>>> b = lambda x, y: print('summer')\nNothing\n>>> c = b(4, 'dog')\nsummer\n>>> print(c)\nLOCKED_ANSWER\n": ["['summer']", "['Function']", "['Nothing']", "['b']", "['Error']"]}, "countData": {"sloppyskipprnt": 1, "lambdadefevalatdef": 1, "fndispnothing": 1, "prntnoneisweird": 4, "lambdamisidentifyrtnval-sloppy": 2, "sloppyskipprnt-sloppy": 1, "varevalisemptyval-evalvar": 1, "fndispnothing-functiondisplay": 1, "fnnameisfncall": 1, "prntnoneisweird-printnone": 4, "noevalexpr": 2, "sloppyifcondition-sloppy": 1, "prntrtnsprntedval": 2, "lambdamisidentifyrtnval": 2, "assignstmtrtnval-assignment": 1, "fnnameisfncall-evalfncall": 1, "prntstrwithquotes": 1, "correct": 1, "lambdadefevalatdef-lambdadefine": 1, "prntrtnsprntedval-printreturnvalue": 2, "lambdamisidentifyrtnval-lambdacallexpr": 2, "assignstmtrtnval": 1, "sloppyifcondition": 1, "prntstrwithquotes-printstring": 1, "varevalisemptyval": 1, "noevalexpr-evalexpr": 2}}